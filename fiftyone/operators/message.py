"""
FiftyOne operator messages.

| Copyright 2017-2025, Voxel51, Inc.
| `voxel51.com <https://voxel51.com/>`_
|
"""

import dataclasses
from enum import Enum
import json
from typing import Optional, Any, Dict


class MessageType(Enum):
    """Message types."""

    SUCCESS = "success"
    ERROR = "error"


class GeneratedMessage(object):
    """A message generated by an operator executed as a generator."""

    def __init__(self, type=MessageType.SUCCESS, cls=None, body=None):
        self.type = type
        self.cls = cls
        self.body = body

    def to_json(self):
        return {
            "type": str(self.type),
            "cls": self.cls.__name__,
            "body": self.body.to_json() if self.body else None,
        }

    def to_json_line(self):
        return json.dumps(self.to_json()) + "\n"


@dataclasses.dataclass
class MessageMetadata:
    """Metadata for a store notification message."""

    operation_type: Optional[str] = None
    dataset_id: Optional[str] = None
    timestamp: Optional[str] = None


@dataclasses.dataclass
class MessageData:
    """Data structure for messages sent by the notification service."""

    key: str
    value: Any
    metadata: MessageMetadata

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "MessageData":
        """Create a MessageData instance from a dictionary.

        Args:
            data: Dictionary containing message data

        Returns:
            MessageData instance
        """
        metadata = MessageMetadata(**data.get("metadata", {}))
        return cls(
            key=data.get("key", ""), value=data.get("value"), metadata=metadata
        )

    @classmethod
    def from_json(cls, json_str: str) -> "MessageData":
        """Create a MessageData instance from a JSON string.

        Args:
            json_str: JSON string containing message data

        Returns:
            MessageData instance
        """
        data = json.loads(json_str)
        return cls.from_dict(data)

    def to_dict(self) -> Dict[str, Any]:
        """Convert the MessageData instance to a dictionary.

        Returns:
            Dictionary representation
        """
        return dataclasses.asdict(self)

    def to_json(self) -> str:
        """Convert the MessageData instance to a JSON string.

        Returns:
            JSON string representation
        """
        return json.dumps(self.to_dict())
