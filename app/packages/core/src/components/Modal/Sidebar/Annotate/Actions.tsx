import {
  BoundingBoxOptions,
  BoundingBoxOverlay,
  overlayFactory,
  useLighter,
} from "@fiftyone/lighter";
import * as fos from "@fiftyone/state";
import React, { useCallback } from "react";
import { useRecoilValue } from "recoil";
import styled from "styled-components";
import useShowModal from "./useShowModal";
import { objectId } from "./utils";

const ActionsDiv = styled.div`
  align-items: center;
  color: ${({ theme }) => theme.text.secondary};
  display: flex;
  justify-content: space-between;
  padding: 0.25rem 1rem;
  width: 100%;
`;

const Line = styled.div`
  background: ${({ theme }) => theme.background.level1};
  height: 16px;
  width: 2px;
`;

const Container = styled.div`
  align-items: center;
  display: flex;
  cursor: pointer;
  flex-direction: column;
  height: 2.5rem;
  justify-content: center;
  padding: 0.25rem;
  width: 2.5rem;
  color: ${({ theme }) => theme.text.secondary};

  &:hover {
    background: ${({ theme }) => theme.background.level1};
  }

  &:hover path {
    fill: ${({ theme }) => theme.primary.plainColor};
  }
`;

const Round = styled(Container)`
  border-radius: 1.25rem;

  &:hover {
    color: ${({ theme }) => theme.text.primary};
  }
`;

export const RoundButton = styled(Round)`
  width: auto;
  height: auto;
  padding: 0.25rem 1rem;
  flex-direction: row;
  column-gap: 1rem;
`;

export const RoundButtonWhite = styled(RoundButton)`
  &:hover path {
    fill: ${({ theme }) => theme.text.primary};
  }
`;

const Square = styled(Container)`
  border-radius: 0.25rem;
`;

const Arrow = () => {
  return (
    <Square
      onClick={() => {
        alert("NAVIGATION");
      }}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="25"
        height="26"
        viewBox="0 0 25 26"
        fill="none"
        style={{ marginLeft: -3 }}
      >
        <title>Navigation</title>
        <path
          d="M14.75 16.8968L11.5918 21.1017C11.4823 21.2371 11.3575 21.3272 11.2174 21.372C11.0773 21.4168 10.9389 21.4209 10.8023 21.3843C10.6657 21.3477 10.5464 21.2723 10.4443 21.158C10.3423 21.0437 10.2777 20.9006 10.2506 20.7286L8.9179 8.18288C8.89703 8.02172 8.92468 7.87586 9.00084 7.74528C9.07701 7.6147 9.17463 7.51504 9.29371 7.44629C9.41279 7.37754 9.54791 7.34283 9.69908 7.34215C9.85024 7.34148 9.99039 7.39047 10.1195 7.48913L20.3181 14.9161C20.4535 15.0256 20.5451 15.1531 20.5931 15.2986C20.641 15.4441 20.6467 15.5852 20.6101 15.7218C20.5735 15.8584 20.5007 15.9762 20.3919 16.0751C20.283 16.1741 20.1426 16.2371 19.9706 16.2642L14.75 16.8968ZM11.5298 18.6693L13.925 15.4678L17.8951 14.9943L10.5875 9.68713L11.5298 18.6693Z"
          fill="#999999"
        />
      </svg>
    </Square>
  );
};

const Move = () => {
  return (
    <Square
      onClick={() => {
        alert("Move");
      }}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="19"
        height="18"
        viewBox="0 0 19 18"
        fill="none"
      >
        <title>Move</title>
        <path
          d="M8.7501 13.6126V11.2501C8.7501 11.0376 8.82197 10.8595 8.96572 10.7157C9.10947 10.572 9.2876 10.5001 9.5001 10.5001C9.7126 10.5001 9.89072 10.572 10.0345 10.7157C10.1782 10.8595 10.2501 11.0376 10.2501 11.2501V13.5938L11.0563 12.7688C11.2063 12.6188 11.3876 12.5438 11.6001 12.5438C11.8126 12.5438 11.9938 12.6188 12.1438 12.7688C12.2938 12.9188 12.3688 13.1001 12.3688 13.3126C12.3688 13.5251 12.2938 13.7063 12.1438 13.8563L10.0251 15.9751C9.9501 16.0501 9.86885 16.1032 9.78135 16.1345C9.69385 16.1657 9.6001 16.1813 9.5001 16.1813C9.4001 16.1813 9.30635 16.1657 9.21885 16.1345C9.13135 16.1032 9.0501 16.0501 8.9751 15.9751L6.8376 13.8376C6.6876 13.6876 6.61572 13.5095 6.62197 13.3032C6.62822 13.097 6.70635 12.9188 6.85635 12.7688C7.00635 12.6188 7.18447 12.5438 7.39072 12.5438C7.59697 12.5438 7.7751 12.6188 7.9251 12.7688L8.7501 13.6126ZM4.90635 9.7501L5.73135 10.5563C5.88135 10.7063 5.95635 10.8876 5.95635 11.1001C5.95635 11.3126 5.88135 11.4938 5.73135 11.6438C5.58135 11.7938 5.4001 11.8688 5.1876 11.8688C4.9751 11.8688 4.79385 11.7938 4.64385 11.6438L2.5251 9.5251C2.4501 9.4501 2.39697 9.36885 2.36572 9.28135C2.33447 9.19385 2.31885 9.1001 2.31885 9.0001C2.31885 8.9001 2.33447 8.80635 2.36572 8.71885C2.39697 8.63135 2.4501 8.5501 2.5251 8.4751L4.64385 6.35635C4.79385 6.20635 4.97197 6.13135 5.17822 6.13135C5.38447 6.13135 5.5626 6.20635 5.7126 6.35635C5.8626 6.50635 5.9376 6.68447 5.9376 6.89072C5.9376 7.09697 5.8626 7.2751 5.7126 7.4251L4.8876 8.2501H7.2501C7.4626 8.2501 7.64072 8.32197 7.78447 8.46572C7.92822 8.60947 8.0001 8.7876 8.0001 9.0001C8.0001 9.2126 7.92822 9.39072 7.78447 9.53447C7.64072 9.67822 7.4626 9.7501 7.2501 9.7501H4.90635ZM14.1126 9.7501H11.7501C11.5376 9.7501 11.3595 9.67822 11.2157 9.53447C11.072 9.39072 11.0001 9.2126 11.0001 9.0001C11.0001 8.7876 11.072 8.60947 11.2157 8.46572C11.3595 8.32197 11.5376 8.2501 11.7501 8.2501H14.0938L13.2688 7.44385C13.1188 7.29385 13.0438 7.1126 13.0438 6.9001C13.0438 6.6876 13.1188 6.50635 13.2688 6.35635C13.4188 6.20635 13.6001 6.13135 13.8126 6.13135C14.0251 6.13135 14.2063 6.20635 14.3563 6.35635L16.4751 8.4751C16.5501 8.5501 16.6032 8.63135 16.6345 8.71885C16.6657 8.80635 16.6813 8.9001 16.6813 9.0001C16.6813 9.1001 16.6657 9.19385 16.6345 9.28135C16.6032 9.36885 16.5501 9.4501 16.4751 9.5251L14.3376 11.6626C14.1876 11.8126 14.0126 11.8845 13.8126 11.8782C13.6126 11.872 13.4376 11.7938 13.2876 11.6438C13.1376 11.4938 13.0626 11.3157 13.0626 11.1095C13.0626 10.9032 13.1376 10.7251 13.2876 10.5751L14.1126 9.7501ZM8.7501 4.3876L7.90635 5.23135C7.75635 5.38135 7.58135 5.45635 7.38135 5.45635C7.18135 5.45635 7.00635 5.38135 6.85635 5.23135C6.70635 5.08135 6.63135 4.90322 6.63135 4.69697C6.63135 4.49072 6.70635 4.3126 6.85635 4.1626L8.9751 2.0251C9.0501 1.9501 9.13135 1.89697 9.21885 1.86572C9.30635 1.83447 9.4001 1.81885 9.5001 1.81885C9.6001 1.81885 9.69385 1.83447 9.78135 1.86572C9.86885 1.89697 9.9501 1.9501 10.0251 2.0251L12.1626 4.1626C12.3126 4.3126 12.3876 4.4876 12.3876 4.6876C12.3876 4.8876 12.3126 5.0626 12.1626 5.2126C12.0126 5.3626 11.8345 5.4376 11.6282 5.4376C11.422 5.4376 11.2438 5.3626 11.0938 5.2126L10.2501 4.3876V6.7501C10.2501 6.9626 10.1782 7.14072 10.0345 7.28447C9.89072 7.42822 9.7126 7.5001 9.5001 7.5001C9.2876 7.5001 9.10947 7.42822 8.96572 7.28447C8.82197 7.14072 8.7501 6.9626 8.7501 6.7501V4.3876Z"
          fill="#999999"
        />
      </svg>
    </Square>
  );
};

const Classification = () => {
  return (
    <Square
      onClick={() => {
        alert("Classification");
      }}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="19"
        height="18"
        viewBox="0 0 19 18"
        fill="none"
      >
        <title>Classification</title>
        <path
          d="M3.5 14.9995C3.0875 14.9995 2.73438 14.8526 2.44063 14.5589C2.14687 14.2651 2 13.912 2 13.4995V4.49951C2 4.08701 2.14687 3.73389 2.44063 3.44014C2.73438 3.14639 3.0875 2.99951 3.5 2.99951H11.75C11.9875 2.99951 12.2125 3.05264 12.425 3.15889C12.6375 3.26514 12.8125 3.41201 12.95 3.59951L16.325 8.09951C16.525 8.36201 16.625 8.66201 16.625 8.99951C16.625 9.33701 16.525 9.63701 16.325 9.89951L12.95 14.3995C12.8125 14.587 12.6375 14.7339 12.425 14.8401C12.2125 14.9464 11.9875 14.9995 11.75 14.9995H3.5ZM3.5 13.4995H11.75L15.125 8.99951L11.75 4.49951H3.5V13.4995Z"
          fill="#999999"
        />
      </svg>
    </Square>
  );
};

const Detection = () => {
  const { addOverlay } = useLighter();
  const currentSampleId = useRecoilValue(fos.currentSampleId);

  const addRandomDetection = useCallback(() => {
    const detection = overlayFactory.create<
      BoundingBoxOptions,
      BoundingBoxOverlay
    >("bounding-box", {
      sampleId: currentSampleId,
      label: {
        id: objectId(),
        label: `detection-${Math.random().toString(36).substring(2, 5)}`,
        tags: [],
        bounding_box: [0.1, 0.1, 0.1, 0.1],
      },
      relativeBounds: {
        x: 0.1,
        y: 0.1,
        width: 0.1,
        height: 0.1,
      },
      draggable: true,
      selectable: true,
    });

    addOverlay(detection, true);
  }, [currentSampleId, addOverlay]);

  return (
    <Square onClick={addRandomDetection}>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="19"
        height="18"
        viewBox="0 0 19 18"
        fill="none"
      >
        <title>Detection</title>
        <path
          d="M4.25 15.75C3.8375 15.75 3.48438 15.6031 3.19063 15.3094C2.89687 15.0156 2.75 14.6625 2.75 14.25V3.75C2.75 3.3375 2.89687 2.98438 3.19063 2.69063C3.48438 2.39687 3.8375 2.25 4.25 2.25H14.75C15.1625 2.25 15.5156 2.39687 15.8094 2.69063C16.1031 2.98438 16.25 3.3375 16.25 3.75V14.25C16.25 14.6625 16.1031 15.0156 15.8094 15.3094C15.5156 15.6031 15.1625 15.75 14.75 15.75H4.25ZM4.25 14.25H14.75V3.75H4.25V14.25Z"
          fill="#999999"
        />
      </svg>
    </Square>
  );
};

const Undo = () => {
  const { undo, canUndo } = useLighter();

  return (
    <Round
      onClick={undo}
      style={{
        opacity: canUndo ? 1 : 0.5,
        cursor: canUndo ? "pointer" : "not-allowed",
      }}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="13"
        height="12"
        viewBox="0 0 13 12"
        fill="none"
      >
        <title>Undo</title>
        <path
          d="M2.98395 12C2.74746 12 2.54922 11.9211 2.38925 11.7633C2.22927 11.6055 2.14928 11.4099 2.14928 11.1767C2.14928 10.9434 2.22927 10.7479 2.38925 10.5901C2.54922 10.4322 2.74746 10.3533 2.98395 10.3533H8.07544C8.95185 10.3533 9.71348 10.0789 10.3604 9.53002C11.0072 8.98113 11.3307 8.29503 11.3307 7.4717C11.3307 6.64837 11.0072 5.96226 10.3604 5.41338C9.71348 4.86449 8.95185 4.59005 8.07544 4.59005H2.81701L4.40289 6.15437C4.55591 6.30532 4.63242 6.49743 4.63242 6.7307C4.63242 6.96398 4.55591 7.15609 4.40289 7.30703C4.24987 7.45798 4.05511 7.53345 3.81862 7.53345C3.58213 7.53345 3.38737 7.45798 3.23435 7.30703L0.229535 4.34305C0.146067 4.26072 0.0869449 4.17153 0.0521669 4.07547C0.017389 3.97942 0 3.8765 0 3.76672C0 3.65695 0.017389 3.55403 0.0521669 3.45798C0.0869449 3.36192 0.146067 3.27273 0.229535 3.19039L3.23435 0.226415C3.38737 0.0754717 3.58213 0 3.81862 0C4.05511 0 4.24987 0.0754717 4.40289 0.226415C4.55591 0.377358 4.63242 0.569468 4.63242 0.802744C4.63242 1.03602 4.55591 1.22813 4.40289 1.37907L2.81701 2.9434H8.07544C9.42483 2.9434 10.5829 3.37564 11.5498 4.24014C12.5166 5.10463 13 6.18182 13 7.4717C13 8.76158 12.5166 9.83877 11.5498 10.7033C10.5829 11.5678 9.42483 12 8.07544 12H2.98395Z"
          fill="#999999"
        />
      </svg>
    </Round>
  );
};

const Redo = () => {
  const { redo, canRedo } = useLighter();

  return (
    <Round
      onClick={redo}
      style={{
        opacity: canRedo ? 1 : 0.5,
        cursor: canRedo ? "pointer" : "not-allowed",
      }}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="13"
        height="12"
        viewBox="0 0 13 12"
        fill="none"
      >
        <title>Redo</title>
        <path
          d="M10.0161 12C10.2525 12 10.4508 11.9211 10.6108 11.7633C10.7707 11.6055 10.8507 11.4099 10.8507 11.1767C10.8507 10.9434 10.7707 10.7479 10.6108 10.5901C10.4508 10.4322 10.2525 10.3533 10.0161 10.3533H4.92456C4.04815 10.3533 3.28652 10.0789 2.63965 9.53002C1.99278 8.98113 1.66934 8.29503 1.66934 7.4717C1.66934 6.64837 1.99278 5.96226 2.63965 5.41338C3.28652 4.86449 4.04815 4.59005 4.92456 4.59005H10.183L8.59711 6.15437C8.44409 6.30532 8.36758 6.49743 8.36758 6.7307C8.36758 6.96398 8.44409 7.15609 8.59711 7.30703C8.75013 7.45798 8.94489 7.53345 9.18138 7.53345C9.41787 7.53345 9.61263 7.45798 9.76565 7.30703L12.7705 4.34305C12.8539 4.26072 12.9131 4.17153 12.9478 4.07547C12.9826 3.97942 13 3.8765 13 3.76672C13 3.65695 12.9826 3.55403 12.9478 3.45798C12.9131 3.36192 12.8539 3.27273 12.7705 3.19039L9.76565 0.226415C9.61263 0.0754717 9.41787 0 9.18138 0C8.94489 0 8.75013 0.0754717 8.59711 0.226415C8.44409 0.377358 8.36758 0.569468 8.36758 0.802744C8.36758 1.03602 8.44409 1.22813 8.59711 1.37907L10.183 2.9434H4.92456C3.57517 2.9434 2.41707 3.37564 1.45024 4.24014C0.483414 5.10463 0 6.18182 0 7.4717C0 8.76158 0.483414 9.83877 1.45024 10.7033C2.41707 11.5678 3.57517 12 4.92456 12H10.0161Z"
          fill="#999999"
        />
      </svg>
    </Round>
  );
};

const Schema = () => {
  const showModal = useShowModal();
  return <RoundButton onClick={showModal}>Schema</RoundButton>;
};

const Actions = () => {
  return (
    <>
      <ActionsDiv>
        <Arrow />
        <Move />
        <Classification />
        <Detection />
        <Line />
        <Undo />
        <Redo />
      </ActionsDiv>
      <ActionsDiv style={{ margin: "0 0.25rem", paddingBottom: "0.5rem" }}>
        <div>Click labels to edit</div>
        <Schema />
      </ActionsDiv>
    </>
  );
};

export default Actions;
