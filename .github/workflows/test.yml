name: Test

on: workflow_call

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      app: ${{ steps.filter.outputs.app }}
      python: ${{ steps.filter.outputs.python }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app:
              - 'app/**'
              - '.github/**'
            python:
              - '.github/**'
              - 'fiftyone/**'
              - 'package/**'
              - 'requirements/**'
              - 'setup.py'

  test-app:
    needs: changes
    if: ${{ needs.changes.outputs.app == 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Clone fiftyone
        uses: actions/checkout@v2
      - name: Cache Node Modules
        id: node-cache
        uses: actions/cache@v3
        with:
          path: app/node_modules
          key: node-modules-${{ hashFiles('app/yarn.lock') }}
      - name: Install app
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: cd app && yarn install
      - name: Run tests
        run: cd app && yarn test --coverage && mv ./coverage/coverage-final.json ../
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-final.json
          flags: unit-tests
          fail_ci_if_error: true

  test-python:
    needs: changes
    if: ${{ needs.changes.outputs.python == 'true' }}
    runs-on: ${{ matrix.os }}
    env:
      FIFTYONE_DO_NOT_TRACK: true
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - windows-latest
        python:
          - 3.7
          - 3.9
        exclude:
          - os: windows-latest
            python: 3.7
          - os: windows-latest
            python: 3.9
    defaults:
      run:
        shell: bash
    steps:
      - name: Clone fiftyone
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"
      - name: Install pip dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
      - name: Install test dependencies (non-Windows)
        if: ${{ !startsWith(matrix.os, 'windows') }} && steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          pip install pytest pytest-cov tensorflow tensorflow-datasets torch torchvision
      # obtained from "Windows, pip" instructions at
      # https://pytorch.org/get-started/locally/ - unaware of a way to update
      # the version number automatically, but tests on other platforms should
      # hopefully catch any relevant PyTorch incompatibilities even if the
      # PyTorch version used on Windows is not the latest
      - name: Install test dependencies (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          pip install pytest pytest-cov tensorflow tensorflow-datasets
          pip install torch==1.7.1+cpu torchvision==0.8.2+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install fiftyone
        run: |
          pip install -r requirements/extras.txt
          pip install .
      - name: Install ETA from source
        if: ${{ !startsWith(github.ref, 'refs/heads/rel') && !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "Installing ETA from source because github.ref = ${{ github.ref }} (not a release)"
          git clone https://github.com/voxel51/eta eta --depth 1 --branch develop
          cd eta
          python setup.py bdist_wheel
          pip install ./dist/*.whl --force-reinstall
      - name: Configure fiftyone for tests
        id: test_config
        run: |
          python tests/utils/setup_config.py
          python tests/utils/github_actions_flags.py
      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v1
      # Important: use pytest_wrapper.py instead of pytest directly to ensure
      # that services shut down cleanly and do not conflict with steps later in
      # this workflow
      - name: Run tests
        run: |
          python tests/utils/pytest_wrapper.py tests/ --verbose --cov \
            --ignore tests/benchmarking/ \
            --ignore tests/isolated/ \
            --ignore tests/utils/ \
            --ignore tests/intensive/ \
            --ignore tests/no_wrapper
            --ignore tests/session_tests.py
      - name: Upload coverage
        if: ${{ !startsWith(matrix.os, 'windows') && matrix.python == '3.9' }}
        uses: codecov/codecov-action@v3
      - name: Run no wrapper tests
        run: |
          pytest tests/no_wrapper --verbose
      # Intended to run even if the tests above failed (todo: don't run if the
      # tests were skipped due to an earlier step failing?)
      - name: Run isolated tests
        if: success() || failure()
        run: |
          find tests/isolated/ -name '*.py' -print0 | xargs -0 --verbose -n1 python tests/utils/pytest_wrapper.py --verbose

  all-tests:
    needs: [test-app, test-python]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: sh -c ${{ needs.test-app.result == 'success' && needs.test-python.result == 'success' }}
