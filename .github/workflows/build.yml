name: Build

on:
  push:
    branches:
      - develop
      - github-actions-*
    tags:
      - v*
      - docker-build
  pull_request:
    types: [opened, synchronize]
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Clone fiftyone
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install --upgrade pip setuptools wheel
      - name: Fetch app dependency cache
        uses: actions/cache@v2
        with:
          path: app/node_modules
          key: npm-${{ hashFiles('app/package.json') }}
          restore-keys: |
            npm-${{ hashFiles('app/package.json') }}
            npm-
      - name: Build app
        run: make app
      - name: Set environment
        env:
          RELEASE_TAG: ${{ github.ref }}
        run: |
          if [[ $RELEASE_TAG =~ ^refs\/tags\/v.*-rc\..*$ ]]; then
             echo "RELEASE_VERSION=$(echo "${{ github.ref }}" | sed "s/^refs\/tags\/v//")" >> $GITHUB_ENV
          fi
      - name: Build python
        run: make python -o app
      - name: Upload dist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/

  test:
    runs-on: ${{ matrix.os }}
    needs: [build]
    env:
      FIFTYONE_DO_NOT_TRACK: true
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - windows-latest
        python:
          - 3.7
          - 3.9
        exclude:
          - os: windows-latest
            python: 3.7
    defaults:
      run:
        shell: bash
    steps:
      - name: Clone fiftyone
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install pip dependencies
        # use `python -m pip` to work around Windows permission issues when
        # upgrading pip
        run: |
          python -m pip install --upgrade pip setuptools wheel
          mkdir -p pip-cache
          echo "PIP_CACHE_DIR=pip-cache" >> $GITHUB_ENV
      - name: Fetch pip cache
        uses: actions/cache@v2
        with:
          path: pip-cache
          key: pip-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/*.txt') }}
            pip-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('setup.py') }}-
            pip-${{ runner.os }}-${{ matrix.python }}-
      - name: Download fiftyone dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: downloads
      - name: Fetch DB cache
        uses: actions/cache@v2
        with:
          key: db-${{ runner.os }}-${{ hashFiles('package/db/setup.py') }}
          path: package/db/cache/
      # install test versions of fiftyone-db and fiftyone-desktop from source
      - name: Install fiftyone-db
        working-directory: package/db
        run: |
          python setup.py bdist_wheel
          pip install dist/*.whl
      - name: Install test dependencies (non-Windows)
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          pip install pytest tensorflow tensorflow-datasets torch torchvision
      - name: Install fiftyone
        run: |
          pip install -r requirements/extras.txt
          pip install downloads/*.whl
          pip install -U --pre --extra-index-url https://test.pypi.org/simple/ fiftyone-brain voxel51-eta
      - name: Install ETA from source
        if: ${{ !startsWith(github.ref, 'refs/heads/rel') && !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "Installing ETA from source because github.ref = ${{ github.ref }} (not a release)"
          git clone https://github.com/voxel51/eta eta --depth 1 --branch develop
          cd eta
          python setup.py bdist_wheel
          pip install ./dist/*.whl --force-reinstall
      # obtained from "Windows, pip" instructions at
      # https://pytorch.org/get-started/locally/ - unaware of a way to update
      # the version number automatically, but tests on other platforms should
      # hopefully catch any relevant PyTorch incompatibilities even if the
      # PyTorch version used on Windows is not the latest
      - name: Install test dependencies (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          pip install pytest tensorflow tensorflow-datasets
          pip install torch==1.7.1+cpu torchvision==0.8.2+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - name: Configure fiftyone for tests
        id: test_config
        run: |
          python tests/utils/setup_config.py
          python tests/utils/github_actions_flags.py
      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v1
      # Important: use pytest_wrapper.py instead of pytest directly to ensure
      # that services shut down cleanly and do not conflict with steps later in
      # this workflow
      - name: Run tests
        run: |
          python tests/utils/pytest_wrapper.py tests/ --verbose \
            --ignore tests/benchmarking/ \
            --ignore tests/isolated/ \
            --ignore tests/utils/ \
            --ignore tests/intensive/ \
            --ignore tests/no_wrapper
      - name: Run no wrapper tests
        run: |
          pytest tests/no_wrapper --verbose
      # Intended to run even if the tests above failed (todo: don't run if the
      # tests were skipped due to an earlier step failing?)
      - name: Run isolated tests
        if: success() || failure()
        run: |
          find tests/isolated/ -name '*.py' -print0 | xargs -0 --verbose -n1 python tests/utils/pytest_wrapper.py --verbose
      # these are somewhat slower/more bandwidth-intensive, so only run them if
      # github_actions_flags.py determined that they should be run
      # Skip: Google Drive unstable
      # - name: Test quickstarts
      #  if: ${{ steps.test_config.outputs.run_integration == 'true' }}
      #  env:
      #    FIFTYONE_EXIT: 1
      #  run: |
      #    fiftyone quickstart --remote
      #    fiftyone quickstart --remote --video

  all-tests:
    needs: test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: sh -c ${{ needs.test.result == 'success' }}

  publish:
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    steps:
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Install dependencies
        run: |
          pip3 install twine
      - name: Set environment
        env:
          RELEASE_TAG: ${{ github.ref }}
        run: |
          if [[ $RELEASE_TAG =~ ^refs\/tags\/v.*-rc\..*$ ]]; then
             echo "TWINE_PASSWORD=${{ secrets.FIFTYONE_TEST_PYPI_TOKEN }}" >> $GITHUB_ENV
             echo "TWINE_REPOSITORY=testpypi" >> $GITHUB_ENV
          else
             echo "TWINE_PASSWORD=${{ secrets.FIFTYONE_PYPI_TOKEN }}" >> $GITHUB_ENV
             echo "TWINE_REPOSITORY=pypi" >> $GITHUB_ENV
          fi
      - name: Upload to pypi
        env:
          TWINE_USERNAME: __token__
          TWINE_NON_INTERACTIVE: 1
        run: |
          python3 -m twine upload dist/*

  build-image:
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/tags/docker-build'
    runs-on: ubuntu-20.04
    steps:
      - name: Clone fiftyone
        uses: actions/checkout@v2
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: docker
        run: make docker-export -o python
      - name: Upload image
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: fiftyone.tar.gz
